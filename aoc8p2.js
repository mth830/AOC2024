let input = ``
input =
  `............
........0...
.....0......
.......0....
....0.......
......A.....
............
............
........A...
.........A..
............
............`
// let valid =
// `......#....#
// ...#....0...
// ....#0....#.
// ..#....0....
// ....0....#..
// .#....A.....
// ...#........
// #......#....
// ........A...
// .........A..
// ..........#.
// ..........#.`
input=
`...............e...........j6.....................
.....1...............................t.....i......
.....4.......3..............x..tL......m..........
.......L.....................Dxj..................
4....X..................F.....................m...
.............4.......x....F........k..............
......3...................t..........i.........Z..
....L..................y.....F..e.....Z...........
X.............1........C..........i...D...........
........4.....................D.....k.X...m.......
...1...............D........e......6..............
...3.Y...................................m8.......
..OL.........................x....Z....g..........
....3......5.........................6j...........
...................J..5r.F..k...y.................
.......................................Z..a.......
...........................5........j.........a.u.
...p..............Y....X..........................
...O.........................kd...................
........................t.................i.......
..................J..............u...........z....
.O.....9.............J..............p..u..........
.....9............................................
l...6.....1........e......I................a......
...................................az.............
........M.......J...................gI....z.......
.......Y...l...........p......g....d.......W......
........5l....9................d.....g............
.A....9.l.Y............I..............B.......s...
..................................K.....B.........
....M.............7.......8..........h.....K......
.......0f...oc..............G...d7.......z...s..yW
...M........0...........Gf.....................T..
................r......G..................w....h..
...........cP................G.8.R..............T.
.................A.............N............u..B..
..H.c..b............................K...CB.....y..
......c...bP...2............7..K..................
......b.o....0.......P.............s........h.R...
......2........f..S........8.....................R
U....2..............p..............7..............
.HE..b......A.............N..............w....C...
................................N.............w...
.........E...........M................W.......T...
......E...rS2...........W....................N....
.....SP..n.....r..0...............................
.....H..............A............................w
..........n..U....................s...............
..n.So.....U................f.....................
Ho................................................`



const map = input.split('\n').map(e => e.split(''))
let points = {};
let inbounds = (r, c) => r >= 0 && c >= 0 && r < map.length && c < map[0].length;
map.forEach((row, r) => row.map((col, c) => {
  let letter = map[r][c];
  if (letter === '.') return;
  if (!(letter in points)) points[letter] = [];
  points[letter].push([r, c]);
}));

let set = {};

for (const [type, pointList] of Object.entries(points)) {
  for (let i = 0; i < pointList.length; i++) {
    let [x, y] = pointList[i];
    for (let j = 0; j < pointList.length; j++) {
      if (i === j) continue;
      let [x1, y1] = pointList[j];
      let [diffX, diffY] = [x1 - x, y1 - y];
      let k = 2;
      set[[x1,y1]]=[x1,y1];
      while (inbounds(x + diffX * k, y + diffY * k)) {
        let antinode = [x + diffX * k, y + diffY * k];
        set[antinode] = antinode;
        k++;
      }
      k = 1;
      while (inbounds(x - diffX * k, y - diffY * k)) {
        let antinode2 = [x - diffX * k, y - diffY * k];
        set[antinode2] = antinode2;
        k++;
      }
    }
  }
}


console.log(Object.keys(set).length)



